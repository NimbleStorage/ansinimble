---
- hosts: "{{ local_smokers }}"
  tasks:
    - set_fact: 
        local_uuid: "{{ (inventory_hostname + ansible_date_time.iso8601_micro) | to_uuid | regex_replace('-','')}}"
        local_provider: "Amazon AWS"
        local_region: "us-west-1"
        local_cloud: "{{ ec2_vpc_id }}"
        local_subnet: "172.31.0.0/16"

    - set_fact:
        cloud_host_ip: "{{ ansible_default_ipv4.address }}"
        cloud_volume_provider: "{{ local_provider }}"
        cloud_volume_region: "{{ local_region }}"
        cloud_volume_options:
          private_cloud: "{{ local_cloud }}"
          existing_cloud_subnet: "{{ local_subnet }}"
        cloud_volume_from_options:
          private_cloud: "{{ local_cloud }}"
          existing_cloud_subnet: "{{ local_subnet }}"

# Hello World
- hosts: "{{ local_smokers }}"
  vars:
    cloud_lcm_state: present
  roles:
    - { role: "{{ local_role }}", cloud_operation: manage, cloud_object: lcm } 

- hosts: "{{ local_smokers }}"
  vars:
    cloud_volume: "{{ local_uuid }}-vol"
    cloud_volume_mountpoint: "/mnt/{{ local_uuid }}-vol"
  roles:
    - { role: "{{ local_role }}", cloud_operation: create, cloud_object: volume } 
    - { role: "{{ local_role }}", cloud_operation: map, cloud_object: volume } 
    - { role: "{{ local_role }}", cloud_operation: mount, cloud_object: volume } 
    - { role: "{{ local_role }}", cloud_operation: snapshot, cloud_object: volume } 

# Take a snap
- hosts: "{{ local_smokers }}"
  vars:
    cloud_volume: "{{ local_uuid }}-vol"
    cloud_volume_snapshot: "{{ local_uuid }}snap"
  roles:
    - { role: "{{ local_role }}", cloud_operation: snapshot, cloud_object: volume } 

# Create a clone from last snapshot
- hosts: "{{ local_smokers }}"
  vars:
    cloud_volume_from: "{{ local_uuid }}-vol"
    cloud_volume: "{{ local_uuid }}-cln-last"
    cloud_volume_mountpoint: "/mnt/{{ local_uuid }}-cln-last"
  roles:
    - { role: "{{ local_role }}", cloud_operation: create, cloud_object: volume } 
    - { role: "{{ local_role }}", cloud_operation: map, cloud_object: volume } 
    - { role: "{{ local_role }}", cloud_operation: mount, cloud_object: volume } 
    - { role: "{{ local_role }}", cloud_operation: umount, cloud_object: volume } 
    - { role: "{{ local_role }}", cloud_operation: unmap, cloud_object: volume } 
    - { role: "{{ local_role }}", cloud_operation: delete, cloud_object: volume } 

# Create a clone from a known snapshot
- hosts: "{{ local_smokers }}"
  vars:
    cloud_volume_from: "{{ local_uuid }}-vol"
    cloud_volume: "{{ local_uuid }}-cln-known"
    cloud_volume_snapshot: "{{ local_uuid }}snap"
    cloud_volume_mountpoint: "/mnt/{{ local_uuid }}-cln-known"
  roles:
    - { role: debug_marker, local_test: "Create a clone from a known snapshot" }
    - { role: "{{ local_role }}", cloud_operation: create, cloud_object: volume } 
    - { role: "{{ local_role }}", cloud_operation: map, cloud_object: volume } 
    - { role: "{{ local_role }}", cloud_operation: mount, cloud_object: volume } 
    - { role: "{{ local_role }}", cloud_operation: umount, cloud_object: volume } 
    - { role: "{{ local_role }}", cloud_operation: unmap, cloud_object: volume } 
    - { role: "{{ local_role }}", cloud_operation: delete, cloud_object: volume } 

# Touch a file
- hosts: "{{ local_smokers }}"
  become: yes
  vars:
    cloud_volume: "{{ local_uuid }}-vol"
  tasks:
    - name: Touch a file
      file:
        path: "/mnt/{{ local_uuid }}-vol/myfile.txt"
        state: touch

# Unmap/unmount
- hosts: "{{ local_smokers }}"
  vars:
    cloud_volume: "{{ local_uuid }}-vol"
    cloud_volume_mountpoint: "/mnt/{{ local_uuid }}-vol"
  roles:
    - { role: debug_marker, local_test: "Prepare for restore from last snapshot {{ cloud_volume }}" }
    - { role: "{{ local_role }}", cloud_operation: umount, cloud_object: volume } 
    - { role: "{{ local_role }}", cloud_operation: unmap, cloud_object: volume } 

# Restore from last snapshot
- hosts: "{{ local_smokers }}"
  vars:
    cloud_volume: "{{ local_uuid }}-vol"
    cloud_volume_mountpoint: "/mnt/{{ local_uuid }}-vol"
  roles:
    - { role: debug_marker, local_test: "Restore from last snapshot" }
    - { role: "{{ local_role }}", cloud_operation: restore, cloud_object: volume } 
    - { role: "{{ local_role }}", cloud_operation: map, cloud_object: volume } 
    - { role: "{{ local_role }}", cloud_operation: mount, cloud_object: volume } 

- hosts: "{{ local_smokers }}"
  vars: 
    cloud_volume: "{{ local_uuid }}-vol"
  tasks:
    - name: Is the file gone?
      stat:
        path: "/mnt/{{ local_uuid }}-vol/myfile.txt"
      register: cloud_file
    - debug: var=cloud_file
    - name: Fail if still there
      fail:
        msg: Unable to restore volume
      when: cloud_file.stat.exists

# Prep restore from a known snapshot
- hosts: "{{ local_smokers }}"
  vars:
    cloud_volume: "{{ local_uuid }}-vol"
    cloud_volume_mountpoint: "/mnt/{{ local_uuid }}-vol"
  roles:
    - { role: debug_marker, local_test: "Prep restore from a known snapshot" }
    - { role: "{{ local_role }}", cloud_operation: umount, cloud_object: volume } 
    - { role: "{{ local_role }}", cloud_operation: unmap, cloud_object: volume } 

# Restore from known snapshot
- hosts: "{{ local_smokers }}"
  vars:
    cloud_volume: "{{ local_uuid }}-vol"
    cloud_volume_mountpoint: "/mnt/{{ local_uuid }}-vol"
    cloud_volume_snapshot: "{{ local_uuid }}snap"
  roles:
    - { role: "{{ local_role }}", cloud_operation: restore, cloud_object: volume } 
    - { role: "{{ local_role }}", cloud_operation: map, cloud_object: volume } 
    - { role: "{{ local_role }}", cloud_operation: mount, cloud_object: volume } 

# Resize 
- hosts: "{{ local_smokers }}"
  vars:
    cloud_volume_size: 30000
    cloud_volume: "{{ local_uuid }}-vol"
    cloud_volume_mountpoint: "/mnt/{{ local_uuid }}-vol"
  roles:
    - { role: "{{ local_role }}", cloud_operation: resize, cloud_object: volume } 

# Delete
- hosts: "{{ local_smokers }}"
  vars:
    cloud_volume: "{{ local_uuid }}-vol"
    cloud_volume_mountpoint: "/mnt/{{ local_uuid }}-vol"
  roles:
    - { role: "{{ local_role }}", cloud_operation: umount, cloud_object: volume } 
    - { role: "{{ local_role }}", cloud_operation: unmap, cloud_object: volume } 
    - { role: "{{ local_role }}", cloud_operation: delete, cloud_object: volume } 

- hosts: "{{ local_smokers }}"
  vars:
    cloud_lcm_state: absent
  roles:
    - { role: "{{ local_role }}", cloud_operation: manage, cloud_object: lcm } 
