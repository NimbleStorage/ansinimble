---
# Hello World
- hosts: smokey
  vars:
    nimble_volume: "{{ inventory_hostname_short }}-vol-handsfree"
    nimble_perfpolicy: "{{ inventory_hostname_short }}-perfpol1"
    nimble_perfpolicy_options:
      compress: True
      description: "This is a description of my policy"
    nimble_perfpolicy_update_options:
      compress: False
  roles:
    - { role: debug_marker, local_test: "NLT-less operation" }
    - { role: NimbleStorage.AnsinimbleTest, 
        nimble_operation: create,
        nimble_object: volume 
      } 
    - { role: NimbleStorage.AnsinimbleTest,
        nimble_operation: delete,
        nimble_object: volume
      } 
    - { role: NimbleStorage.AnsinimbleTest,
        nimble_operation: create,
        nimble_object: perfpolicy
      } 
    - { role: NimbleStorage.AnsinimbleTest,
        nimble_operation: update,
        nimble_object: perfpolicy
      } 
    - { role: NimbleStorage.AnsinimbleTest,
        nimble_operation: delete,
        nimble_object: perfpolicy
      } 

- hosts: smokey
  vars:
    nimble_volume: "{{ inventory_hostname_short }}-vol"
    nimble_volume_pool: default
    nimble_volume_perfpolicy: "Windows File Server"
    nimble_volume_folder: "{{ inventory_hostname_short }}-fldr"
    nimble_folder: "{{ inventory_hostname_short }}-fldr"
    nimble_volume_mountpoint: "/mnt/{{ inventory_hostname_short }}-vol"
    nimble_initiator_group_options:
      description: "This is a description of my initiator group"
  roles:
    - { role: debug_marker, local_test: "First pass" }
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: create, nimble_object: folder } 
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: create, nimble_object: volume } 
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: map, nimble_object: volume } 
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: mount, nimble_object: volume } 
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: snapshot, nimble_object: volume } 

# Touch a file
- hosts: smokey
  become: yes
  vars:
    nimble_volume: "{{ inventory_hostname_short }}-vol"
  tasks:
    - name: Touch a file
      file:
        path: "/mnt/{{ inventory_hostname_short }}-vol/myfile-known.txt"
        state: touch

# Update folder and a known snap
- hosts: smokey
  vars:
    nimble_folder: "{{ inventory_hostname_short }}-fldr"
    nimble_folder_update_options:
      description: "This folder is smoked"
    nimble_volume: "{{ inventory_hostname_short }}-vol"
    nimble_volume_snapshot: "{{ inventory_hostname_short }}-snap"
  roles:
    - { role: debug_marker, local_test: "Update folders and create a snapshot" }
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: update, nimble_object: folder } 
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: snapshot, nimble_object: volume } 

# Create a clone from last snapshot
- hosts: smokey
  vars:
    nimble_volume_from: "{{ inventory_hostname_short }}-vol"
    nimble_volume: "{{ inventory_hostname_short }}-cln"
    nimble_volume_mountpoint: "/mnt/{{ inventory_hostname_short }}-cln"
  roles:
    - { role: debug_marker, local_test: "Create clone from last snapshot" }
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: create, nimble_object: volume } 
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: map, nimble_object: volume } 
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: mount, nimble_object: volume } 
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: umount, nimble_object: volume } 
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: unmap, nimble_object: volume } 
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: delete, nimble_object: volume } 

# Create a clone from a known snapshot
- hosts: smokey
  vars:
    nimble_volume_from: "{{ inventory_hostname_short }}-vol"
    nimble_volume: "{{ inventory_hostname_short }}-cln"
    nimble_volume_snapshot: "{{ inventory_hostname_short }}-snap"
    nimble_volume_mountpoint: "/mnt/{{ inventory_hostname_short }}-cln"
  roles:
    - { role: debug_marker, local_test: "Create clone from known snapshot" }
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: create, nimble_object: volume } 
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: map, nimble_object: volume } 
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: mount, nimble_object: volume } 

# Ensure our file is in the clone
- hosts: smokey
  tasks:
    - name: Is the file gone?
      stat:
        path: "/mnt/{{ inventory_hostname_short }}-cln/myfile-known.txt"
      register: nimble_file
    - debug: var=nimble_file
    - name: Fail if still there
      fail:
        msg: Cloning failed, file does not exist
      when: nimble_file.stat.exists

# Remove known clone
- hosts: smokey
  vars:
    nimble_volume: "{{ inventory_hostname_short }}-cln"
    nimble_volume_mountpoint: "/mnt/{{ inventory_hostname_short }}-cln"
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: umount, nimble_object: volume } 
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: unmap, nimble_object: volume } 
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: delete, nimble_object: volume } 

# Touch a file
- hosts: smokey
  become: yes
  vars:
    nimble_volume: "{{ inventory_hostname_short }}-vol"
  tasks:
    - name: Touch a file
      file:
        path: "/mnt/{{ inventory_hostname_short }}-vol/myfile.txt"
        state: touch

# Unmap/unmount
- hosts: smokey
  vars:
    nimble_volume: "{{ inventory_hostname_short }}-vol"
    nimble_volume_mountpoint: "/mnt/{{ inventory_hostname_short }}-vol"
  roles:
    - { role: debug_marker, local_test: "Unmap/unmount" }
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: umount, nimble_object: volume } 
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: unmap, nimble_object: volume } 

# Restore from last snapshot
- hosts: smokey
  vars:
    nimble_volume: "{{ inventory_hostname_short }}-vol"
    nimble_volume_mountpoint: "/mnt/{{ inventory_hostname_short }}-vol"
  become: yes
  roles:
    - { role: debug_marker, local_test: "Restore volume" }
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: restore, nimble_object: volume } 
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: map, nimble_object: volume } 
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: mount, nimble_object: volume } 

- hosts: smokey
  vars: 
    nimble_volume: "{{ inventory_hostname_short }}-vol"
  tasks:
    - name: Is the file gone?
      stat:
        path: "/mnt/{{ inventory_hostname_short }}-vol/myfile.txt"
      register: nimble_file
    - debug: var=nimble_file
    - name: Fail if still there
      fail:
        msg: Unable to restore volume
      when: nimble_file.stat.exists

# Prep restore from a known snapshot
- hosts: smokey
  vars:
    nimble_volume: "{{ inventory_hostname_short }}-vol"
    nimble_volume_mountpoint: "/mnt/{{ inventory_hostname_short }}-vol"
  become: yes
  roles:
    - { role: debug_marker, local_test: "Unmap/unmount #2" }
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: umount, nimble_object: volume } 
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: unmap, nimble_object: volume } 

# Restore from known snapshot
- hosts: smokey
  vars:
    nimble_volume_snapshot: "{{ inventory_hostname_short }}-snap"
    nimble_volume: "{{ inventory_hostname_short }}-vol"
    nimble_volume_mountpoint: "/mnt/{{ inventory_hostname_short }}-vol"
  become: yes
  roles:
    - { role: debug_marker, local_test: "Restore from known snapshot" }
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: restore, nimble_object: volume } 
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: map, nimble_object: volume } 
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: mount, nimble_object: volume } 

# Data protection
- hosts: smokey
  become: yes
  vars:
    nimble_volume: "{{ inventory_hostname_short }}-vol"
  roles:
    - { role: debug_marker,
        local_test: "Data protection (partner)"
      }
    - { role: NimbleStorage.AnsinimbleTest,
        nimble_operation: partner,
        nimble_object: replication,
      }
  tags:
    - nopartner

- hosts: smokey
  become: yes
  vars:
    nimble_volume: "{{ inventory_hostname_short }}-vol"
  roles:
    - { role: debug_marker,
        local_test: "Data protection (juggle)"
      }
    - { role: NimbleStorage.AnsinimbleTest,
        nimble_operation: create,
        nimble_object: volcoll,
        nimble_volume_collection: "{{ inventory_hostname_short }}-vol-manual",
        nimble_protection_template: "Retain-30Daily"
      } 
    - { role: NimbleStorage.AnsinimbleTest,
        nimble_operation: protect,
        nimble_object: volume,
        nimble_volume_collection: "{{ inventory_hostname_short }}-vol-manual"
      } 
    - { role: NimbleStorage.AnsinimbleTest,
        nimble_operation: unprotect,
        nimble_object: volume
      } 
    - { role: NimbleStorage.AnsinimbleTest,
        nimble_operation: prune,
        nimble_object: volcoll
      } 
    - { role: NimbleStorage.AnsinimbleTest,
        nimble_operation: protect,
        nimble_object: volume,
        nimble_protection_template: "Retain-30Daily"
      } 
    - { role: NimbleStorage.AnsinimbleTest,
        nimble_operation: unprotect,
        nimble_object: volume
      } 
    - { role: NimbleStorage.AnsinimbleTest,
        nimble_operation: prune,
        nimble_object: volcoll
      } 
    - { role: NimbleStorage.AnsinimbleTest,
        nimble_operation: create,
        nimble_object: prottmpl,
        nimble_protection_template: MyTestTemplate,
        nimble_protection_schedules: {
          myotherschedule: {
            downstream_partner_id: "{{ nimble_partnerships.test.downstream.name }}",
            num_retain_replica: 32,
            description: "Create a snapshot daily during weekdays at 1am and retain 16 locally and 32 remotely",
            period_unit: "days",
            days: "monday,tuesday,wednesday,thursday,friday",
            at_time: 3600,
            num_retain: 16
          }
        }
      }
    - { role: NimbleStorage.AnsinimbleTest,
        nimble_operation: delete,
        nimble_object: prottmpl,
        nimble_protection_template: MyTestTemplate
      }
    - { role: NimbleStorage.AnsinimbleTest,
        nimble_operation: divorce,
        nimble_object: replication,
        nimble_partner: "{{ nimble_partnerships.test.downstream.name }}"
      }
  tags:
    - nopartner

# Resize and delete
- hosts: smokey
  vars:
    nimble_folder: "{{ inventory_hostname_short }}-fldr"
    nimble_volume: "{{ inventory_hostname_short }}-vol"
    nimble_volume_size: 30000
    nimble_volume_mountpoint: "/mnt/{{ inventory_hostname_short }}-vol"
  become: yes
  roles:
    - { role: debug_marker, local_test: "Resize and delete" }
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: resize, nimble_object: volume } 
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: umount, nimble_object: volume } 
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: unmap, nimble_object: volume } 
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: delete, nimble_object: volume } 
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: delete, nimble_object: folder } 
  tags:
    - wipe

- hosts: smokey
  become: yes
  roles:
    - { role: NimbleStorage.AnsinimbleTest,
        nimble_operation: divorce,
        nimble_object: replication,
        nimble_partner: "{{ nimble_partnerships.test.upstream.name }}",
        nimble_group_options: {
          username: "{{ nimble_partnerships.test.downstream.username }}",
          ip-address: "{{ nimble_partnerships.test.downstream.hostname }}" 
        },
        nimble_group_password: "{{ nimble_partnerships.test.downstream.password }}"
      }
  tags:
    - divorce
    - nopartner
    
- hosts: smokey
  become: yes
  vars:
    nimble_linux_toolkit_state: absent
  roles:
    - { role: debug_marker, local_test: "Uninstall NLT" }
    - { role: NimbleStorage.AnsinimbleTest, nimble_operation: manage, nimble_object: nlt } 
  tags:
    - uninstall
