---
- name: Ensure play variables are sane
  fail:
    msg: "Missing variable {{ item }}"
  when: vars[item] is undefined
  with_items:
    - nimble_volume

- name: Host facts
  include: nimble_host_facts.yml
  when: nimble_host_facts is undefined

- name: Refresh group facts
  include: nimble_group_facts.yml
  vars:
    nimble_group_facts:
      volumes: "fields=name,id,serial_number,target_name&name={{ nimble_volume }}"

- block:
  - include: nimble_util_device_name.yml 

  - name: Dismantling data path
    command: ncmadm --remove {{ nimble_volume_device_name }}
    register: nimble_volume_removed
    until: nimble_volume_removed.stdout.find('Done') != -1
    retries: "{{ nimble_device_retries }}"
    delay: "{{ nimble_device_delay }}"
  
  - name: Dismantling data path (forcefully)
    command: ncmadm --remove --force {{ nimble_volume_device_name }}
    args:
      removes: "{{ nimble_volume_device_name }}"
    
  - name: Wait for device to disappear
    wait_for:
      path: "{{ nimble_volume_device_name }}"
      state: absent
      timeout: "{{ nimble_device_delay * nimble_device_retries }}"
  when: nimble_host_protocol == 'iscsi' or nimble_host_protocol == 'fc' 
 
- block: 
  - name: Monitor volume connections
    set_fact:
        nimble_volume_id: "{{ nimble_group_facts.volumes[0].id }}"
  - uri:
      url: "{{ nimble_group_url }}/volumes/{{ nimble_volume_id }}"
      validate_certs: no
      method: GET
      status_code: 200
      headers:
        X-Auth-Token: "{{ nimble_group_token }}"
    retries: "{{ nimble_device_retries }}"
    delay: "{{ nimble_device_delay }}"
    register: nimble_volume_disconnected
    when: nimble_volume_unmap_volume_connections == True
    until: nimble_volume_disconnected.json.data.num_connections == 0
    delegate_to: 127.0.0.1
    delegate_facts: False
    connection: local
  when: nimble_host_protocol == 'iscsi'
