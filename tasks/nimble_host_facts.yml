---
- name: Ensure NLT is running
  service:
    name: nlt
  register: nimble_nlt_state
  delegate_to: "{{ nimble_delegate_host | default(ansible_hostname) }}"
  delegate_facts: "{{ nimble_delegate_facts | default(False) }}"
  when: nimble_linux_toolkit_ignore == False

- include: nimble_nlt_manage.yml
  vars:
    nimble_linux_toolkit_state: running
  when: nimble_linux_toolkit_ignore == False and nimble_nlt_state.status.SubState != 'running'

- block:
  - name: Probe my IQN
    stat:
      path: "{{ nimble_host_iqn_file }}"
    register: nimble_host_iqn_file_stat

  - command: awk -F = '{ if ($1 == "InitiatorName") print $2 }' {{ nimble_host_iqn_file | quote }}
    register: nimble_host_iqn
    when: nimble_host_iqn_file_stat.stat.exists

  - name: Probe WWPNs 
    shell: ls /sys/class/fc_host/host*/port_name || true
    register: nimble_host_fc_adapters

  - slurp:
      src: "{{ item }}"
    register: nimble_host_port_names
    with_items: "{{ nimble_host_fc_adapters.stdout_lines }}"
    no_log: True

  - set_fact:
      nimble_host_wwpns: "{{ nimble_host_wwpns }} + [ '{{ item.content | b64decode | 
            regex_replace('([a-zA-Z0-9]{2})','\\1:') | 
            regex_replace('0x:(.*):\n$','\\1')}}' ]"
    vars:
      nimble_host_wwpns: []
    with_items: "{{ nimble_host_port_names.results }}"
    no_log: True

  - set_fact:
      nimble_host_facts: '{
        "iqn": "{{ nimble_host_iqn.stdout | default(omit) }}",
        "wwpns": {{ nimble_host_wwpns | default([]) }}
      }'
  when: nimble_host_facts is undefined or nimble_host_facts_force is defined
  delegate_to: "{{ nimble_delegate_host | default(ansible_hostname) }}"
  delegate_facts: "{{ nimble_delegate_facts | default(False) }}"
