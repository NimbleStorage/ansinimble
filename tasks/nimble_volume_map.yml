---
- name: Ensure play variables are sane
  fail:
    msg: "Missing variable {{ item }}"
  when: vars[item] is undefined
  with_items:
    - nimble_volume

- name: Host facts
  include: nimble_host_facts.yml
  when: nimble_host_facts is undefined and nimble_initiator_options is undefined

- name: Refresh group facts
  include: nimble_group_facts.yml
  vars:
    nimble_group_facts:
      initiator_groups: "fields=name,id"
      volumes: "fields=name,id,target_name,serial_number,access_control_records&name={{ nimble_volume }}"
      access_control_records: "fields=id,initiator_group_id,vol_id&vol_name={{ nimble_volume }}"
      initiators: "fields=id,label"
      subnets: "fields=allow_iscsi,discovery_ip"

- name: Merge nimble_initiator_group_options
  set_fact: 
    nimble_initiator_group_options_default: "{{ nimble_initiator_group_options_default | combine( { item.key: item.value } ) }}"
  with_dict: "{{ nimble_initiator_group_options }}"
  when: nimble_initiator_group_options is defined

- name: Create Initiator Group
  uri:
    url: "{{ nimble_group_url }}/initiator_groups"
    validate_certs: no
    method: POST
    status_code: 201
    body_format: json
    headers:
      X-Auth-Token: "{{ nimble_group_token }}"
    body:
     data: "{{ nimble_initiator_group_options_default }}"
    return_content: yes
  register: nimble_initiator_group
  when: nimble_group_facts | json_query(local_query) == []
  vars:
    local_query: "initiator_groups[?name=='{{ nimble_initiator_group_options_default.name }}'].name"
  retries: "{{ nimble_uri_retries }}"
  delay: "{{ nimble_uri_delay }}"
  until: nimble_initiator_group | success

- name: Merge nimble_initiator_options
  set_fact: 
    nimble_initiator_options_default: "{{ nimble_initiator_options_default | combine( { item.key: item.value } ) }}"
  with_dict: "{{ nimble_initiator_options }}"
  when: nimble_initiator_options is defined

- name: Overlay newly created initiator_group ID
  set_fact:
    nimble_initiator_group_id: "{{ nimble_initiator_group.json.data.id }}"
  when: nimble_initiator_group.json is defined

- name: Find previously created initator_group ID
  set_fact:
    nimble_initiator_group_id: "{{ nimble_group_facts | json_query(local_query) }}"
  vars:
    local_query: "initiator_groups[?name==`{{ inventory_hostname_short }}`].id | [0]"
  when: nimble_initiator_group.json is undefined

- name: Merge nimble_initiator_group_id
  set_fact:
    nimble_initiator_options_default: "{{ nimble_initiator_options_default | combine( { 'initiator_group_id': nimble_initiator_group_id } ) }}"
  when: nimble_initiator_group_id is defined

- name: Create Initiator
  uri:
    url: "{{ nimble_group_url }}/initiators"
    validate_certs: no
    method: POST
    status_code: 201
    body_format: json
    headers:
      X-Auth-Token: "{{ nimble_group_token }}"
    body:
     data: "{{ nimble_initiator_options_default }}"
    return_content: yes
  when: nimble_group_facts | json_query(local_query) == []
  vars:
    local_query: "initiators[?label=='{{ nimble_initiator_options_default.label }}'].label"
  retries: "{{ nimble_uri_retries }}"
  delay: "{{ nimble_uri_delay }}"
  register: nimble_initiator_created
  until: nimble_initiator_created | success

- name: Retrieve nimble_volume_id
  set_fact:
    nimble_volume_id: "{{ nimble_group_facts | json_query(local_query) }}"
  vars:
    local_query: "volumes[?name=='{{ nimble_volume }}'].id | [0]"

- name: Ensure nimble_volume is online
  uri:
    url: "{{ nimble_group_url }}/volumes/{{ nimble_volume_id }}"
    validate_certs: no
    method: PUT
    status_code: 200
    body_format: json
    body:
      data:
        id: "{{ nimble_volume_id }}"
        online: True
    headers:
      X-Auth-Token: "{{ nimble_group_token }}"
  retries: "{{ nimble_uri_retries }}"
  delay: "{{ nimble_uri_delay }}"
  register: nimble_volume_onlined
  until: nimble_volume_onlined | success

- name: Create Access Control Record
  uri:
    url: "{{ nimble_group_url }}/access_control_records"
    validate_certs: no
    method: POST
    status_code: 201, 409
    body_format: json
    headers:
      X-Auth-Token: "{{ nimble_group_token }}"
    body:
     data:
       initiator_group_id: "{{ nimble_initiator_group_id }}"
       vol_id: "{{ nimble_volume_id }}"
    return_content: yes
  when: nimble_group_facts | json_query(local_query) == [] and nimble_volume_id != '' and nimble_initiator_group_id is defined
  vars:
    local_query: "access_control_records[?initiator_group_id=='{{ nimble_initiator_group_id }}' && vol_id=='{{ nimble_volume_id }}'].id"
  retries: "{{ nimble_uri_retries }}"
  delay: "{{ nimble_uri_delay }}"
  register: nimble_acr_created
  until: nimble_acr_created | success

- name: Discover Targets
  command: ncmadm -e {{ nimble_group_discovery_ip }}
  register: nimble_discover_targets

- name: Get volume serial number
  set_fact:
    nimble_volume_serial_number: "{{ nimble_group_facts | json_query(local_query) }}"
  vars:
    local_query: "volumes[?name=='{{ nimble_volume }}'].serial_number | [0]"

- name: Create device string
  set_fact:
    nimble_volume_device_name: "/dev/nimblestorage/{{ nimble_volume }}-2{{ nimble_volume_serial_number }}"

- name: Wait for device to appear
  wait_for:
    path: "{{ nimble_volume_device_name }}"
    timeout: "{{ nimble_device_delay }}"
