---
- name: Ensure play variables are sane
  fail:
    msg: "Missing variable {{ item }}"
  when: vars[item] is undefined
  with_items:
    - nimble_volume

- fail:
    msg: "nimble_protection_template or nimble_volume_collection are required"
  when: nimble_protection_template is undefined and nimble_volume_collection is undefined

- fail:
    msg: "nimble_protection_template and nimble_volume_collection are mutually exclusive"
  when: nimble_protection_template is defined and nimble_volume_collection is defined

- name: Host facts
  include: nimble_host_facts.yml
  when: nimble_host_facts is undefined

- name: Gather volcolls and protection templates
  include: nimble_group_facts.yml
  vars:
    nimble_group_facts:
      volumes:
      volume_collections: 
      protection_templates:

- name: Lookup volume ID into nimble_volume_id
  include: nimble_util_volume_id.yml 

- block: 
  - name: Lookup volcoll
    set_fact:
      nimble_volume_protect_local: "{{ nimble_volume_protect_local | combine( { 'volcoll_id': item } ) }}"
    with_items:
      - "{{ nimble_group_facts | json_query(local_query) }}"
    vars:
      local_query: "volume_collections[?name=='{{ nimble_volume_collection }}'].id | [0]"

  - fail:
      msg: "Unknown volume collection ({{ nimble_volume_collection }})"
    when: nimble_volume_protect_local.volcoll_id == ""

  - name: Assign volcoll
    uri:
      url: "{{ nimble_group_url }}/volumes/{{ nimble_volume_id }}"
      validate_certs: no
      method: PUT
      status_code: 200
      body_format: json
      headers:
        X-Auth-Token: "{{ nimble_group_token }}"
      body:
        data: "{{ nimble_volume_protect_local }}"
      return_content: yes
    register: local_volume_protect
    retries: "{{ nimble_uri_retries }}"
    delay: "{{ nimble_uri_delay }}"
    until: local_volume_protect | success
  when: nimble_volume_collection is defined

- block: 
  - name: Lookup protection template
    set_fact:
      nimble_volume_protect_local: "{{ nimble_volume_protect_local | combine( { 'id': item } ) }}"
    with_items:
      - "{{ nimble_group_facts | json_query(local_query) }}"
    vars:
      local_query: "protection_templates[?name=='{{ nimble_protection_template }}'].id | [0]"
  
  - fail:
      msg: "Unknown protection template ({{ nimble_protection_template }})"
    when: nimble_volume_protect_local.id == ""
    
  - name: Create volcoll
    uri:
      url: "{{ nimble_group_url }}/volume_collections"
      validate_certs: no
      method: POST
      status_code: 201
      body_format: json
      headers:
        X-Auth-Token: "{{ nimble_group_token }}"
      body:
        data: 
          name: "{{ nimble_volume }}"
          prottmpl_id: "{{ nimble_volume_protect_local.id }}"
          is_standalone_volcoll: True
      return_content: true
    retries: "{{ nimble_uri_retries }}"
    delay: "{{ nimble_uri_delay }}"
    register: nimble_volcoll_created
    until: nimble_volcoll_created | success
  
  - name: Assign volcoll
    uri:
      url: "{{ nimble_group_url }}/volumes/{{ nimble_volume_id }}"
      validate_certs: no
      method: PUT
      status_code: 200
      body_format: json
      headers:
        X-Auth-Token: "{{ nimble_group_token }}"
      body:
        data:
          volcoll_id: "{{ nimble_volcoll_created.json.data.id }}"
      return_content: yes
    register: local_volume_protect
    retries: "{{ nimble_uri_retries }}"
    delay: "{{ nimble_uri_delay }}"
    until: local_volume_protect | success
  when: nimble_protection_template is defined
