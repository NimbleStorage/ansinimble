---
- name: Ensure play variables are sane
  fail:
    msg: "Missing variable {{ item }}"
  when: vars[item] is undefined
  with_items:
    - nimble_volume
    - nimble_volume_mountpoint

- name: Host facts
  include: nimble_host_facts.yml
  when: nimble_host_facts is undefined

- name: Refresh group facts
  include: nimble_group_facts.yml
  vars:
    nimble_group_facts:
      volumes: "fields=name,id,serial_number&name={{ nimble_volume }}"

- name: Get volume serial number
  set_fact:
    nimble_volume_serial_number: "{{ nimble_group_facts | json_query(local_query) }}"
  vars:
    local_query: "volumes[?name=='{{ nimble_volume }}'].serial_number | [0]"

- name: Create device string
  set_fact:
    nimble_volume_device_name: "/dev/nimblestorage/{{ nimble_volume }}-2{{ nimble_volume_serial_number }}"

- name: Ensure device
  stat:
    path: "{{ nimble_volume_device_name }}"
  register: nimble_volume_device_info
- fail:
    msg: "{{ nimble_volume_device_name }} does not exist."
  when: nimble_volume_device_info.stat.exists == False

- name: Create filesystem label
  include: util_volume_label.yml
  vars:
    util_volume_label: "{{ nimble_volume }}"

- name: Create filesystem
  filesystem: 
    dev: "{{ nimble_volume_device_name }}"
    fstype: xfs
    opts: -L {{ util_volume_label }} {{ nimble_volume_mkfs_options }}
  register: nimble_filesystem_created

- name: Update label if this is an existing filesystem (clone)
  shell: xfs_admin -L {{ util_volume_label | quote }} -U {{ ansible_date_time.iso8601_micro | to_uuid }} {{ nimble_volume_device_name | quote }}
  when: nimble_filesystem_created.changed == False

- name: Mount volume
  mount:
    name: "{{ nimble_volume_mountpoint }}"
    state: mounted
    src: LABEL={{ util_volume_label }}
    opts: "{{ nimble_volume_mount_options }},x-systemd.requires={{ nimble_volume_device_name }}"
    fstype: xfs
  retries: "{{ nimble_device_retries }}"
  delay: "{{ nimble_device_delay }}"
  register: nimble_volume_mounted
  until: nimble_volume_mounted | success
