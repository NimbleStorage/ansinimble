---
- name: Ensure nimble_volume and nimble_volume_mountpoint
  fail: msg="Missing variable nimble_volume and nimble_volume_mountpoint, please provide a volume name in nimble_volume and current mountpoint in nimble_volume_mountpoint"
  when: nimble_volume is undefined and nimble_volume_mountpoint is undefined

- name: Host facts
  include: nimble_host_facts.yml
  when: nimble_host_facts is undefined

- name: Refresh group facts
  include: nimble_group_facts.yml
  vars:
    nimble_group_facts:
      volumes: "fields=name,target_name,id,serial_number&name={{ nimble_volume }}"
      subnets: "fields=allow_iscsi,discovery_ip"

- name: Discover Targets
  command: ncmadm -e {{ nimble_group_discovery_ip }}
  register: nimble_discover_targets
  when: ansible_os_family == 'RedHat'

- name: Discover Targets
  open_iscsi: 
    show_nodes: yes
    discover: yes
    portal: "{{ nimble_group_discovery_ip }}"
  when: ansible_os_family == 'Debian'

- name: Discover LUN
  open_iscsi:
    auto_node_startup: True
    discover: True
    login: True
    portal: "{{ nimble_group_discovery_ip }}"
    target: "{{ nimble_group_facts | json_query(local_query) }}"
  vars:
    local_query: "volumes[?name=='{{ nimble_volume }}'].target_name | [0]"
  when: ansible_os_family == 'Debian'

- name: Get volume serial number
  set_fact:
    nimble_volume_serial_number: "{{ nimble_group_facts | json_query(local_query) }}"
  vars:
    local_query: "volumes[?name=='{{ nimble_volume }}'].serial_number | [0]"

- name: Create device string
  set_fact:
    nimble_volume_device_name: "{{ nimble_host_device_prefix }}/{{ nimble_volume }}-2{{ nimble_volume_serial_number }}"
  when: ansible_os_family == 'RedHat'

- name: Create device string
  set_fact:
    nimble_volume_device_name: "/dev/disk/by-id/dm-uuid-mpath-2{{ nimble_volume_serial_number }}"
  when: ansible_os_family == 'Debian'

- name: Wait for device to appear
  wait_for:
    path: "{{ nimble_volume_device_name }}"
    timeout: "{{ nimble_device_delay }}"

- name: Create filesystem
  filesystem: 
    dev: "{{ nimble_volume_device_name }}"
    fstype: xfs
    opts: -L {{ nimble_volume }} {{ nimble_volume_mkfs_options }}
  register: nimble_filesystem_created

- name: Update label if this is an existing filesystem (clone)
  shell: xfs_admin -L {{ nimble_volume | quote }} -U {{ ansible_date_time.iso8601_micro | to_uuid }} {{ nimble_volume_device_name | quote }}
  when: nimble_filesystem_created.changed == False

- name: Mount volume
  mount:
    name: "{{ nimble_volume_mountpoint }}"
    state: mounted
    src: LABEL={{ nimble_volume }}
    opts: "{{ nimble_volume_mount_options }},x-systemd.requires={{ nimble_volume_device_name }}"
    fstype: xfs
  retries: "{{ nimble_device_retries }}"
  delay: "{{ nimble_device_delay }}"
  register: nimble_volume_mounted
  until: nimble_volume_mounted | success
