---
- name: Ensure nimble_volume
  fail: msg="Missing variable nimble_volume, please provide a volume name in nimble_volume"
  when: nimble_volume is undefined

- name: Host facts
  include_role:
    name: nimble_host_facts
  when: nimble_host_facts is undefined

- name: Need NimbleOS version upfront
  include_role:
    name: nimble_group_facts
  vars:
    nimble_group_facts:
      software_versions: 

- name: Figure out volume fields (NimbleOS >=4)
  set_fact:
    nimble_volume_fields: "fields=name,id,last_snap"
  when: "{{ nimble_group_version | version_compare('4', '>=') }}"

- name: Figure out volume fields (NimbleOS < 4)
  set_fact:
    nimble_volume_fields: "fields=name,id"
  when: "{{ nimble_group_version | version_compare('4', '<') }}"

- name: Refresh group facts
  include_role:
    name: nimble_group_facts
  vars:
    nimble_group_facts:
      volumes: "{{ nimble_volume_fields }}"

- name: Get nimble_volume_id
  set_fact:
    nimble_volume_id: "{{ nimble_group_facts | json_query(local_query) }}"
  vars:
    local_query: "volumes[?name=='{{ nimble_volume }}'].id | [0]"

- name: Determine last snapshot ID
  set_fact:
    nimble_volume_snapshot_id: "{{ nimble_group_facts | json_query(local_query) }}"
  vars:
    local_query: "volumes[?name=='{{ nimble_volume }}'].last_snap.snap_id | [0]"
  when: nimble_volume_snapshot is undefined and "{{ nimble_group_version | version_compare('4', '>=') }}"

- block:
  - name: Query for snapshots on nimble_volume
    uri:
      url: "{{ nimble_group_url }}/snapshots/detail?vol_id={{ nimble_volume_id }}"
      validate_certs: no
      method: GET
      status_code: 200
      HEADER_X-Auth-Token: "{{ nimble_group_token }}"
      return_content: yes
    register: nimble_volume_snapshots

  - name: Retrieve snapshot ID
    set_fact:
      nimble_volume_snapshot_id: "{{ nimble_volume_snapshots.json | json_query(local_query) }}"
    vars:
      local_query: "data[?vol_id=='{{ nimble_volume_id }}' && name=='{{ nimble_volume_snapshot }}'].id | [0]"
    when: nimble_volume_snapshot is defined

  - name: Retrieve last snapshot ID (NimbleOS < 4)
    set_fact:
      nimble_volume_snapshot_id: "{{ nimble_volume_snapshots.json | json_query(local_query) }}"
    vars:
      local_query: "data[?vol_id=='{{ nimble_volume_id }}'].id | [0]"
    when: nimble_volume_snapshot is undefined and "{{ nimble_group_version | version_compare('4', '<') }}"

  when: nimble_volume_snapshot is defined or {{ nimble_group_version | version_compare('4', '<') }}

- name: Restore volume
  uri:
    url: "{{ nimble_group_url }}/volumes/{{ nimble_volume_id }}/actions/restore"
    validate_certs: no
    method: POST
    status_code: 200
    body_format: json
    body:
      data:
        id: "{{ nimble_volume_id }}"
        base_snap_id: "{{ nimble_volume_snapshot_id }}"
    HEADER_X-Auth-Token: "{{ nimble_group_token }}"
